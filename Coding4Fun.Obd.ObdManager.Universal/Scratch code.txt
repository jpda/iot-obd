async void InitializeRfcommDeviceService()
{
    try
    {
        DeviceInformationCollection DeviceInfoCollection = await DeviceInformation.FindAllAsync(RfcommDeviceService.GetDeviceSelector(RfcommServiceId.SerialPort));


        var numDevices = DeviceInfoCollection.Count();

        // By clearing the backing data, we are effectively clearing the ListBox
        _pairedDevices = new ObservableCollection<PairedDeviceInfo>();
        _pairedDevices.Clear();

        if (numDevices == 0)
        {
            System.Diagnostics.Logger.DebugWrite("InitializeRfcommDeviceService: No paired devices found.");
        }
        else
        {
            // Found paired devices.
            foreach (var deviceInfo in DeviceInfoCollection)
            {
                PairedDeviceInfo pdi = new PairedDeviceInfo(deviceInfo);
                _pairedDevices.Add(pdi);
                System.Diagnostics.Logger.DebugWrite(pdi.ToString());
                //find the correct OBD Sensor
                if (pdi.ToString().Contains("OBDLink MX"))
                {
                    ConnectDevice(pdi);
                }
            }
        }

    }
    catch (Exception ex)
    {
        System.Diagnostics.Logger.DebugWrite("InitializeRfcommDeviceService: " + ex.Message);
    }
}
async void ConnectDevice(PairedDeviceInfo pairedDevice)
{
    DeviceInformation DeviceInfo;
    DeviceInfo = pairedDevice.DeviceInfo;

    bool success = true;
    try
    {
        //_service = await RfcommDeviceService.FromIdAsync(DeviceInfo.Id);
        _service = Task.Run<RfcommDeviceService>(async () =>
        {
            return await RfcommDeviceService.FromIdAsync(DeviceInfo.Id);
        }).Result;



        if (_socket != null)
        {
            // Disposing the socket with close it and release all resources associated with the socket
            _socket.Dispose();
        }

        _socket = new StreamSocket();
        try
        {
            // Note: If either parameter is null or empty, the call will throw an exception
            Task.Run(async () => {
                await _socket.ConnectAsync(_service.ConnectionHostName, _service.ConnectionServiceName);
            }).Wait();
            //await _socket.ConnectAsync(_service.ConnectionHostName, _service.ConnectionServiceName);
        }
        catch (Exception ex)
        {
            success = false;
            System.Diagnostics.Logger.DebugWrite("Connect:" + ex.Message);
        }
        // If the connection was successful, the RemoteAddress field will be populated
        if (success)
        {
            string msg = String.Format("Connected to {0}!", _socket.Information.RemoteAddress.DisplayName);
            System.Diagnostics.Logger.DebugWrite(msg);

            //send a message
            Send("ATZ");
            Listen();
            //Send("ATE0");
            //Send("ATL0");
            //Send("ATH1");
            //Send("ATSP 5");
            //Send(GetMessage());


        }
    }
    catch (Exception ex)
    {
        System.Diagnostics.Logger.DebugWrite("Overall Connect: " + ex.Message);
        _socket.Dispose();
        _socket = null;
    }
}
public async void Send(string msg)
{
    try
    {
        // Create the DataWriter object and attach to OutputStream
        dataWriterObject = new DataWriter(_socket.OutputStream);

        //Launch the WriteAsync task to perform the write
        await WriteAsync(msg + "\r\n");
    }
    catch (Exception ex)
    {
        System.Diagnostics.Logger.DebugWrite("Send(): " + ex.Message);
    }
    finally
    {
        // Cleanup once complete
        if (dataWriterObject != null)
        {
            dataWriterObject.DetachStream();
            dataWriterObject = null;
        }
    }
}
public string GetMessage()
{
    byte mode, pid;
    mode = 0x01;
    pid = 0x0C;
    Debug.Write("PID: " + pid.ToString("X2") + "RPM");
    //ask for RPMs right now as a test. 
    return mode.ToString("X2") + pid.ToString("X2");

}
private async Task WriteAsync(string msg)
{
    Task<UInt32> storeAsyncTask;

    // Load the text from the sendText input text box to the dataWriter object
    dataWriterObject.WriteString(msg);

    // Launch an async task to complete the write operation
    storeAsyncTask = dataWriterObject.StoreAsync().AsTask();

    //see if the message wa sent
    UInt32 bytesWritten = await storeAsyncTask;
    if (bytesWritten > 0)
    {
        string status_Text = msg + ", ";
        status_Text += bytesWritten.ToString();
        status_Text += " bytes written successfully!";
        System.Diagnostics.Logger.DebugWrite(status_Text);
    }
    Listen();
}

/// <summary>
/// - Create a DataReader object
/// - Create an async task to read from the SerialDevice InputStream
/// </summary>
/// <param name="sender"></param>
/// <param name="e"></param>
private async void Listen()
{
    try
    {
        ReadCancellationTokenSource = new CancellationTokenSource();
        if (_socket.InputStream != null)
        {
            // keep reading the serial input
            while (true)
            {
                await ReadAsync(ReadCancellationTokenSource.Token);
            }
        }
    }
    catch (Exception ex)
    {
        if (ex.GetType().Name == "TaskCanceledException")
        {
            System.Diagnostics.Logger.DebugWrite("Listen: Reading task was cancelled, closing device and cleaning up");
        }
        else
        {
            System.Diagnostics.Logger.DebugWrite("Listen: " + ex.Message);
        }
    }
    finally
    {
        // Cleanup once complete
        if (dataReaderObject != null)
        {
            dataReaderObject.DetachStream();
            dataReaderObject = null;
        }
    }
}

/// <summary>
/// ReadAsync: Task that waits on data and reads asynchronously from the serial device InputStream
/// </summary>
/// <param name="cancellationToken"></param>
/// <returns></returns>
private async Task ReadAsync(CancellationToken cancellationToken)
{
    Task<UInt32> loadAsyncTask;

    uint ReadBufferLength = 1024;

    // If task cancellation was requested, comply
    cancellationToken.ThrowIfCancellationRequested();
    dataReaderObject = new DataReader(_socket.InputStream);
    // Set InputStreamOptions to complete the asynchronous read operation when one or more bytes is available
    dataReaderObject.InputStreamOptions = InputStreamOptions.Partial;

    // Create a task object to wait for data on the serialPort.InputStream
    loadAsyncTask = dataReaderObject.LoadAsync(ReadBufferLength).AsTask(cancellationToken);

    // Launch the task and wait
    UInt32 bytesRead = await loadAsyncTask;
    if (bytesRead > 0)
    {
        try
        {
            string recvdtxt = dataReaderObject.ReadString(bytesRead);
            System.Diagnostics.Logger.DebugWrite(recvdtxt);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Logger.DebugWrite("ReadAsync: " + ex.Message);
        }

    }
}

/// <summary>
/// CancelReadTask:
/// - Uses the ReadCancellationTokenSource to cancel read operations
/// </summary>
private void CancelReadTask()
{
    if (ReadCancellationTokenSource != null)
    {
        if (!ReadCancellationTokenSource.IsCancellationRequested)
        {
            ReadCancellationTokenSource.Cancel();
        }
    }
}

protected override ObdResponse GetPidData(int mode, int pid)
{
    throw new NotImplementedException();
}



///////////////////////////////
 if (protocol > 9 || protocol != UnknownProtocol)
                throw new ArgumentOutOfRangeException(protocol.ToString(), "Protocol must be a value between 1 and 9, inclusive.");

            ObdState os = new ObdState();

_serial = new SerialPort(comPort, baud);
_serial.NewLine = ">";      // responses end with the > prompt character
            _serial.Open();

            _errorCount = 0;
            _connected = true;
            FireConnectionChangedEvent(_connected);

            //LastResponse = WriteAndCheckResponse("ATZ"); // reset
            //LastResponse = WriteAndCheckResponse("ATE0"); // echo off
            //LastResponse = WriteAndCheckResponse("ATL0"); // line feeds off

            // no longer allow the ELM's auto detect since we need to know which protocol we're using
            if (protocol == UnknownProtocol || protocol == 0)
            {
                for (protocol = 1; protocol <= 9; protocol++)
                {
                    LastResponse = WriteAndCheckResponse("ATSP" + protocol); // OBD protocol
                    try
                    {
                        LastResponse = WriteAndCheckResponse("01 00");  // send command to initialize comm bus (i.e. get PIDs supported)
                        break;
                    }
                    catch (ObdException)
                    {
                        Trace.WriteLine("It's not protocol " + protocol);
                    }
                }

                if (protocol == 10)
                    throw new ObdException("Could not find compatible protocol. Ensure the cable is securely connected to the OBD port on the vehicle.");
            }
            else
            {
                LastResponse = WriteAndCheckResponse("ATSP" + protocol); // OBD protocol
LastResponse = WriteAndCheckResponse("01 00");  // send command to initialize comm bus (i.e. get PIDs supported)
            }

            _protocol = protocol;

            LastResponse = WriteAndCheckResponse("ATH1"); // turn on headers (needed for ECU)

_supportedPids = GetSupportedPids();

int count = 0;

            foreach (var pidEntry in _supportedPids)
            {
                if (pidEntry.Value.Count > count)
                {
                    _currentEcu = pidEntry.Key;
                    count = pidEntry.Value.Count;
                }
            }

            Trace.WriteLine("Using ECU " + _currentEcu + " with " + count + " PIDs");

            if (poll)
            {
                _event = new AutoResetEvent(false);

Thread t = new Thread(PollObd);
t.IsBackground = true;
                t.Name = "ObdPoller";
                t.Start();
            }

            base.Connect();